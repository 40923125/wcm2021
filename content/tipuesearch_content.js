var tipuesearch = {"pages": [{'title': 'About', 'text': 'This is  https://github.com/mdecourse/cmstemplate \n 目前的 cmsimde 在編輯器下方新增一個 csave 按鈕, 意即 collabrative save, 當動態網際管理系統在多人同時維護登入維護網頁內容時, 編輯各頁面時段, 該頁面可能已經改版, 因此使用 csave 按鈕存檔時, 會導入當下最新的該頁面內容, 並試圖與編輯中的頁面內容進行合併. \n 使用 csave 按鈕存檔無法刪除頁面資料. \n 使用 Edit All 模式, 無法使用 csave 按鈕（尚未測試). \n', 'tags': '', 'url': 'About.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'heroku', 'text': '1. 建立 Heroku 帳號， 進入 \xa0 https://heroku.com ， 用學校電子郵件註冊一個 Heroku 帳號,，密碼設定必須要至少 8 個字元，且字元中必須包含符號.大小寫英文字母及數字其中三項， 並且登記後要進入電子郵件進行確認後才能開通 Heroku 帳號。 \n 2. 登入Heroku後，先以 s + 學號 建立一個 app，完成後，將可至 https://s學號.herokuapp.com 連線取得網站內容。 \n 3. 從 \xa0 http://a.kmol.info:88/heroku.7z \xa0下載 Heroku.zip 解開至隨身碟 Y:所在位置。 \n 4. 更改啟動檔，設定其存取路徑: \n @echo off\nset Disk=y\nsubst %Disk%: "data"\nset Local=%Disk%\\heroku\n\n%Disk%:\n\nset HomePath=%Disk%:\\home_ipv6\nset HomeDrive=%Disk%:\\home_ipv6\nset Home=%Disk%:\\home_ipv6\nset USERPROFILE=%Disk%:\\home_ipv6\n\nREM for heroku login\nset HTTP_PROXY=http://[2001:288:6004:17::69]:3128\nset HTTPS_PROXY=http://[2001:288:6004:17::69]:3128\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Disk%:\\Python39\\DLLs;%Disk%:\\Python39\\Lib;%Disk%:\\Python39\\Lib\\site-packages;\nset PYTHONHOME=%Disk%:\\Python39\n\nREM for ssh\nset GIT_SSH=%disk%:\\putty\\plink.exe\n\nREM 設定跟 Python 有關的命令搜尋路徑\nset path_python=%Disk%:\\Python39;%Disk%:\\Python39\\Scripts;\nset path_portablegit=%Disk%:\\Portablegit\\bin;\nset path_heroku=%Disk%:\\heroku\\bin;\n\npath=%Disk%:;%path_python%;%path_portablegit%;%path_heroku%;%path%;\nREGEDIT.EXE /S Y\\40923125.reg;\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wScite\\SciTE.exe\nstart /MIN %Disk%:\\wScite\\SciTE.exe\n\nExit \n 5. 測試是否能夠在命令列中執行 heroku.exe，於其內輸入 heroku version 若有回應使用版本，表示上述路徑設定已經成功。 \n 6. Chrome 作為 WWW 網路協定的 client，目前 Windows 下的最新版，只能使用操作系統的 Proxy 設定。 \n 而 git 作為 git client 與 github server 連線的 Proxy 設定，則寫在 y:\\home_ipv6 下的 .giconfig 中, 以，git config --global http.proxy "http://your_proxy:port" 進行設定。 \n 相同的道理 heroku cli 作為\xa0 https://heroku.com \xa0伺服器的 client 端, 也有其 Proxy 的設定方式, 也就是在 start_ipv6.bat 中加入: \n REM for heroku login\nset HTTP_PROXY=http://[2001:288:6004:17::53]:3128\nset HTTPS_PROXY=http://[2001:288:6004:17::53]:3128 \n 7. (設定同步倉儲) 針對利用 Heroku 同步 Github Pages 上的網站內容，只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱，之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號，就能在每次更新 Github Pages 倉儲後，再將內容同步至 Heroku。網際內容管理課程將使用兩種 Heroku app 設定，也就是靜態網頁與動態網頁: \n 靜態網頁 - 採用 php 方式部署，讓 Heroku 將靜態網頁視為 PHP 程式，利用 index.php 跳轉到 index.html \n 動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服。 \n 8.(以 git 進行提交推送) 利用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku"，使用者只要使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲。 \n # 以 interactive 模式登入 Heroku, 完成後產生 y:\\home_ipv6\\_netrc\nheroku login -i\n# 針對已經登入的 Heroku 帳號下的 s40923125 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.\nheroku git:remote -a s40923125 \n 步驟完成後可進入 Heroku 網站:\xa0 https://s40923125.herokuapp.com', 'tags': '', 'url': 'heroku.html'}]};